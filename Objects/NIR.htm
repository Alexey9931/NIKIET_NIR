<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\NIR.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\NIR.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue May 16 17:49:51 2023
<BR><P>
<H3>Maximum Stack Usage =       4224 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MODBUS_read_request_and_send_response &rArr; uart_read &rArr; __aeabi_memcpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NonMaskableInt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NonMaskableInt_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[6]">DMA_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">DMA_IRQHandler</a><BR>
 <LI><a href="#[8]">UART2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UART2_IRQHandler</a><BR>
 <LI><a href="#[9]">SSP1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SSP1_IRQHandler</a><BR>
 <LI><a href="#[a]">POWER_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">POWER_IRQHandler</a><BR>
 <LI><a href="#[b]">WWDG_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">WWDG_IRQHandler</a><BR>
 <LI><a href="#[d]">TIMER2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">TIMER2_IRQHandler</a><BR>
 <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[f]">COMPARATOR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">COMPARATOR_IRQHandler</a><BR>
 <LI><a href="#[10]">BACKUP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">BACKUP_IRQHandler</a><BR>
 <LI><a href="#[11]">EXT_INT0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">EXT_INT0_IRQHandler</a><BR>
 <LI><a href="#[12]">EXT_INT1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">EXT_INT1_IRQHandler</a><BR>
 <LI><a href="#[13]">EXT_INT2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">EXT_INT2_IRQHandler</a><BR>
 <LI><a href="#[14]">ADCIU_CH1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">ADCIU_CH1_IRQHandler</a><BR>
 <LI><a href="#[15]">ADCIU_CH2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">ADCIU_CH2_IRQHandler</a><BR>
 <LI><a href="#[16]">ADCIU_CH3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADCIU_CH3_IRQHandler</a><BR>
 <LI><a href="#[17]">ADCIU_CH4_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADCIU_CH4_IRQHandler</a><BR>
 <LI><a href="#[18]">ADCIU_CH5_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ADCIU_CH5_IRQHandler</a><BR>
 <LI><a href="#[19]">ADCIU_CH6_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">ADCIU_CH6_IRQHandler</a><BR>
 <LI><a href="#[1a]">ADCIU_CH7_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADCIU_CH7_IRQHandler</a><BR>
 <LI><a href="#[1b]">ADCIU_CH8_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ADCIU_CH8_IRQHandler</a><BR>
 <LI><a href="#[1c]">ADCIU_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADCIU_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">ADCIU_CH1_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[15]">ADCIU_CH2_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[16]">ADCIU_CH3_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[17]">ADCIU_CH4_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[18]">ADCIU_CH5_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[19]">ADCIU_CH6_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[1a]">ADCIU_CH7_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[1b]">ADCIU_CH8_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[1c]">ADCIU_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[10]">BACKUP_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[f]">COMPARATOR_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[6]">DMA_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[11]">EXT_INT0_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[12]">EXT_INT1_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[13]">EXT_INT2_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[1]">NonMaskableInt_Handler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[a]">POWER_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[9]">SSP1_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[1d]">SystemInit</a> from system_mdr1986be4.o(.text.SystemInit) referenced from startup_mdr1986be4.o(.text)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from timer.o(.text.TIMER1_IRQHandler) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[7]">UART1_IRQHandler</a> from uart.o(.text.UART1_IRQHandler) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[8]">UART2_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_mdr1986be4.o(.text) referenced from startup_mdr1986be4.o(RESET)
 <LI><a href="#[1e]">__main</a> from __main.o(!!!main) referenced from startup_mdr1986be4.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[22]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[75]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[76]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[23]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[77]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[27]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[78]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[79]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[80]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[81]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[82]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[83]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[84]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[85]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[86]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[87]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[88]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[89]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[8e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[8f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[90]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[91]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[92]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[93]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[94]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[21]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[95]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[24]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[96]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[28]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 4224 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MODBUS_read_request_and_send_response &rArr; uart_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[97]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[38]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[98]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NonMaskableInt_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonMaskableInt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NonMaskableInt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SSP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>POWER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>COMPARATOR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPARATOR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMPARATOR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BACKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BACKUP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BACKUP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXT_INT0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_INT2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ADCIU_CH1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ADCIU_CH2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADCIU_CH3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADCIU_CH4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH4_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADCIU_CH5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH5_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADCIU_CH6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH6_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH6_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADCIU_CH7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH7_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH7_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADCIU_CH8_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH8_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_CH8_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADCIU_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCIU_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr1986be4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
</UL>

<P><STRONG><a name="[9a]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;averaging
</UL>

<P><STRONG><a name="[32]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[31]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_mesuare
</UL>

<P><STRONG><a name="[a1]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[a2]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_mesuare
</UL>

<P><STRONG><a name="[a3]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2a]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a4]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a5]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a6]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>ADC1_Cmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text.ADC1_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Init
</UL>

<P><STRONG><a name="[45]"></a>ADC1_GetResult</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text.ADC1_GetResult))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_mesuare
</UL>

<P><STRONG><a name="[44]"></a>ADC1_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text.ADC1_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_mesuare
</UL>

<P><STRONG><a name="[3f]"></a>ADC1_Init</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, mdr32f9qx_adc.o(.text.ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Init
</UL>

<P><STRONG><a name="[42]"></a>ADC1_SetChannel</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mdr32f9qx_adc.o(.text.ADC1_SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_mesuare
</UL>

<P><STRONG><a name="[43]"></a>ADC1_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mdr32f9qx_adc.o(.text.ADC1_Start))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_mesuare
</UL>

<P><STRONG><a name="[39]"></a>ADCInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, adc.o(.text.ADCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADCInit &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>ADC_Channel_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, adc.o(.text.ADC_Channel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_Channel_Init &rArr; ADC1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Cmd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCx_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>ADC_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mdr32f9qx_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[3b]"></a>ADC_StructInit</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, mdr32f9qx_adc.o(.text.ADC_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
</UL>

<P><STRONG><a name="[41]"></a>ADC_start_mesuare</STRONG> (Thumb, 1604 bytes, Stack size 584 bytes, adc.o(.text.ADC_start_mesuare))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = ADC_start_mesuare &rArr; averaging &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;averaging
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetResult
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetStatus
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Start
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_SetChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>ADCx_StructInit</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, mdr32f9qx_adc.o(.text.ADCx_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADCx_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Init
</UL>

<P><STRONG><a name="[4b]"></a>MODBUS_read_request_and_send_response</STRONG> (Thumb, 232 bytes, Stack size 4144 bytes, data_interface.o(.text.MODBUS_read_request_and_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 4208<LI>Call Chain = MODBUS_read_request_and_send_response &rArr; uart_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read_pos
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_pos
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>PORT_Init</STRONG> (Thumb, 524 bytes, Stack size 164 bytes, mdr32f9qx_port.o(.text.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortsInit
</UL>

<P><STRONG><a name="[51]"></a>PORT_StructInit</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, mdr32f9qx_port.o(.text.PORT_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PORT_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortsInit
</UL>

<P><STRONG><a name="[50]"></a>PortsInit</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, ports.o(.text.PortsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = PortsInit &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_StructInit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>RST_CLK_GetClocksFreq</STRONG> (Thumb, 652 bytes, Stack size 80 bytes, mdr32f9qx_rst_clk.o(.text.RST_CLK_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[3a]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mdr32f9qx_rst_clk.o(.text.RST_CLK_PCLKcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortsInit
</UL>

<P><STRONG><a name="[55]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, system_mdr1986be4.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1d]"></a>SystemInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, system_mdr1986be4.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = TIMER1_IRQHandler &rArr; ADC_start_mesuare &rArr; averaging &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ClearFlag
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_mesuare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIMER1_init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, timer.o(.text.TIMER1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMER1_init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Cmd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ITConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_BRGInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnOutInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnOutStructInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SetChnCompare
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_ChnStructInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_CntStructInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>TIMER_BRGInit</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text.TIMER_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[5b]"></a>TIMER_ChnInit</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, mdr32f9qx_timer.o(.text.TIMER_ChnInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER_ChnInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[5e]"></a>TIMER_ChnOutInit</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, mdr32f9qx_timer.o(.text.TIMER_ChnOutInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER_ChnOutInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[5d]"></a>TIMER_ChnOutStructInit</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, mdr32f9qx_timer.o(.text.TIMER_ChnOutStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_ChnOutStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[5a]"></a>TIMER_ChnStructInit</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, mdr32f9qx_timer.o(.text.TIMER_ChnStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_ChnStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[56]"></a>TIMER_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mdr32f9qx_timer.o(.text.TIMER_ClearFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>TIMER_Cmd</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, mdr32f9qx_timer.o(.text.TIMER_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[59]"></a>TIMER_CntInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mdr32f9qx_timer.o(.text.TIMER_CntInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_CntInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[58]"></a>TIMER_CntStructInit</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, mdr32f9qx_timer.o(.text.TIMER_CntStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIMER_CntStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[61]"></a>TIMER_ITConfig</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mdr32f9qx_timer.o(.text.TIMER_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[5c]"></a>TIMER_SetChnCompare</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mdr32f9qx_timer.o(.text.TIMER_SetChnCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_SetChnCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[7]"></a>UART1_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uart.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART1_IRQHandler &rArr; UART_GetITStatusMasked
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatusMasked
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr1986be4.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>UART_BRGInit</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, mdr32f9qx_uart.o(.text.UART_BRGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_BRGInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[66]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mdr32f9qx_uart.o(.text.UART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>UART_Cmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mdr32f9qx_uart.o(.text.UART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[67]"></a>UART_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, mdr32f9qx_uart.o(.text.UART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[64]"></a>UART_GetITStatusMasked</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, mdr32f9qx_uart.o(.text.UART_GetITStatusMasked))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_GetITStatusMasked
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>UART_ITConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, mdr32f9qx_uart.o(.text.UART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[68]"></a>UART_Init</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, mdr32f9qx_uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[65]"></a>UART_ReceiveData</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, mdr32f9qx_uart.o(.text.UART_ReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>UART_SendData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mdr32f9qx_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[49]"></a>averaging</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, adc.o(.text.averaging))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = averaging &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_mesuare
</UL>

<P><STRONG><a name="[29]"></a>main</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4224<LI>Call Chain = main &rArr; MODBUS_read_request_and_send_response &rArr; uart_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_read_request_and_send_response
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registers_ini
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Channel_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6b]"></a>registers_ini</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, register_space.o(.text.registers_ini))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = registers_ini &rArr; write_register
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>uart_init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = uart_init &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BRGInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>uart_read</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, uart.o(.text.uart_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_read_request_and_send_response
</UL>

<P><STRONG><a name="[4d]"></a>uart_read_pos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text.uart_read_pos))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_read_request_and_send_response
</UL>

<P><STRONG><a name="[4e]"></a>uart_set_pos</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, uart.o(.text.uart_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_read_request_and_send_response
</UL>

<P><STRONG><a name="[4f]"></a>uart_write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uart.o(.text.uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_write &rArr; UART_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_read_request_and_send_response
</UL>

<P><STRONG><a name="[48]"></a>write_register</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, register_space.o(.text.write_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_mesuare
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registers_ini
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;averaging
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_mesuare
</UL>

<P><STRONG><a name="[71]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_start_mesuare
</UL>

<P><STRONG><a name="[a9]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[73]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[60]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, timer.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[62]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, timer.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_init
</UL>

<P><STRONG><a name="[6f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, uart.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[74]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[72]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
